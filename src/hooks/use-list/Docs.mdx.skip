import { Meta, Markdown, Canvas } from "@storybook/blocks";

<Meta title="hooks/useListField" />

<hgroup>

<p class="category">Hooks</p>

# `useListField<Fields>(listField, options): UseListField<Fields>`

A hook to manage a [listField()](?path=/docs/fields-listField--docs). It provides list of items ready to be rendered, together with actions to add, remove or reorder the items.

</hgroup>

This hook is used internally in the [ListField](?path=/docs/components-listfield--docs) component which is the preffered way to manage the listFields.

```tsx
import { listField, useListField } from "@form-atoms/field";

const myList = listField({ ... });

const MyListField ({initialValue}) => {
  const {remove, add, move, items, isEmpty} = useListField(myList, {initialValue});

  return <>{items.map(({key, fields, remove, moveUp, moveDown})) => <div key={key}>{/* render item form */}</div>}</>
}
```

### Features

- ✅ **Remove, add and move actions** for both list and each item.
- ✅ **Gives each item a unique & stable `key`** for performant list rendering.
- ✅ Computes the `isEmpty` meta data, for easier blank slate implementation.

### Arguments

#### `listField: ListField<Fields>`

The first argument is your [listField()](?path=/docs/fields-listField--docs) instance.

#### `options?: UseFieldOptions<FormValues<Fields>[]>`

Use options argument to initialize your field. The `initialValue` must be an array of form values produced by the form fields of your listField builder:

```ts
// empty list field
const addressesList = listField({
  builder: (address) => ({ city: textField(), street: textField() }),
});

const addresses = useListField(myList, {
  initialValue: [{ city: "Helsinki", street: "Mannerheimintie" }],
});
```

### Returns

```ts
import { PrimitiveAtom, FormAtom, FormFields } from "form-atoms";

type UseListField<Fields extends FormFields> = {
  /**
   * An action to remove the item from the list.
   */
  remove(item): void;
  /**
   * An action to append new item to the list, or prepend specific item when specified.
   */
  add(before?): void;
  /**
   * An action to move an item before another item.
   */
  move(item, before?): void;
  /**
   * Indicates whether the items array is empty.
   */
  isEmpty: boolean;
  items: ReadonlyArray<{
    /**
     * Unique item key defined by its inner form atom.
     */
    key: string;
    /**
     * @internal
     * The atom representing the current item.
     */
    item: PrimitiveAtom<
      FormAtom<{
        fields: Fields;
      }>
    >;
    /**
     * The form fields of this item as returned from the listField's builder.
     */
    fields: Fields;
    /**
     * An action to remove this item.
     */
    remove(): void;
    /**
     * An action to move this item up. Noop for the first item.
     */
    moveUp(): void;
    /**
     * An action to move this item down. Makes item first for the last item.
     */
    moveDown(): void;
  }>;
};
```
